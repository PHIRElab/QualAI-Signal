# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'signal_annotation.ui'
#
# Created by: PyQt5 UI code generator 5.9.2
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication,QWidget, QVBoxLayout, QPushButton, QFileDialog , QLabel, QTextEdit, QInputDialog, QMessageBox
from pyqtgraph import PlotWidget
import pandas as pd
import pyqtgraph as pg
from PyQt5.QtGui import *



class TableModel(QtCore.QAbstractTableModel):

    def __init__(self, data):
        super(TableModel, self).__init__()
        self._data = data

    def data(self, index, role):
        if role == Qt.DisplayRole:
            value = self._data.iloc[index.row(), index.column()]
            return str(value)

    def rowCount(self, index):
        return self._data.shape[0]

    def columnCount(self, index):
        return self._data.shape[1]

    def headerData(self, section, orientation, role):
        # section is the index of the column/row.
        if role == Qt.DisplayRole:
            if orientation == Qt.Horizontal:
                return str(self._data.columns[section])

            if orientation == Qt.Vertical:
                return str(self._data.index[section])


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1627, 934)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(0, 0))
        app.setStyle("Fusion")

    # Fusion dark palette from https://gist.github.com/QuantumCD/6245215.
        palette = QPalette()
        palette.setColor(QPalette.Window, QColor(53, 53, 53))
        palette.setColor(QPalette.WindowText, Qt.white)
        palette.setColor(QPalette.Base, QColor(25, 25, 25))
        palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
        palette.setColor(QPalette.ToolTipBase, Qt.white)
        palette.setColor(QPalette.ToolTipText, Qt.white)
        palette.setColor(QPalette.Text, Qt.white)
        palette.setColor(QPalette.Button, QColor(53, 53, 53))
        palette.setColor(QPalette.ButtonText, Qt.white)
        palette.setColor(QPalette.BrightText, Qt.red)
        palette.setColor(QPalette.Link, QColor(42, 130, 218))
        palette.setColor(QPalette.Highlight, QColor(42, 130, 218))
        palette.setColor(QPalette.HighlightedText, Qt.black)
        app.setPalette(palette)
        app.setStyleSheet("QToolTip { color: #ffffff; background-color: #2a82da; border: 1px solid white; }")
        #palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        MainWindow.setPalette(palette)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../.designer/backup/icons8-face-id-96 (1).png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setDockNestingEnabled(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.dataTabs = QtWidgets.QTabWidget(self.centralwidget)
        self.dataTabs.setGeometry(QtCore.QRect(10, 0, 1611, 831))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dataTabs.sizePolicy().hasHeightForWidth())
        self.dataTabs.setSizePolicy(sizePolicy)
        self.dataTabs.setTabPosition(QtWidgets.QTabWidget.East)
        self.dataTabs.setIconSize(QtCore.QSize(50, 50))
        self.dataTabs.setTabBarAutoHide(True)
        self.dataTabs.setObjectName("dataTabs")
        self.annoTab = QtWidgets.QWidget()
        self.annoTab.setObjectName("annoTab")
        self.signalGroupBox = QtWidgets.QGroupBox(self.annoTab)
        self.signalGroupBox.setGeometry(QtCore.QRect(10, 10, 1561, 551))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.signalGroupBox.sizePolicy().hasHeightForWidth())
        self.signalGroupBox.setSizePolicy(sizePolicy)
        self.signalGroupBox.setObjectName("signalGroupBox")
        self.signalWidget = PlotWidget(self.signalGroupBox)
        self.signalWidget.setGeometry(QtCore.QRect(10, 30, 1541, 501))
        self.signalWidget.setObjectName("signalWidget")
        self.annotationGroupBox = QtWidgets.QGroupBox(self.annoTab)
        self.annotationGroupBox.setGeometry(QtCore.QRect(10, 550, 1561, 261))
        self.annotationGroupBox.setObjectName("annotationGroupBox")
        self.annotationWidget = PlotWidget(self.annotationGroupBox)
        self.annotationWidget.setGeometry(QtCore.QRect(10, 20, 1541, 231))
        self.annotationWidget.setObjectName("annotationWidget")
        self.dataTabs.addTab(self.annoTab, "")
        self.signalTab = QtWidgets.QWidget()
        self.signalTab.setObjectName("signalTab")
        self.signalTable = QtWidgets.QTableView(self.signalTab)
        self.signalTable.setGeometry(QtCore.QRect(0, 0, 1581, 821))
        self.signalTable.setObjectName("signalTable")
        self.dataTabs.addTab(self.signalTab, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1627, 26))
        self.menubar.setObjectName("menubar")
        self.menuMenu = QtWidgets.QMenu(self.menubar)
        self.menuMenu.setObjectName("menuMenu")
        self.menuSave = QtWidgets.QMenu(self.menuMenu)
        self.menuSave.setObjectName("menuSave")
        self.menuLoad = QtWidgets.QMenu(self.menuMenu)
        self.menuLoad.setObjectName("menuLoad")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setIconSize(QtCore.QSize(60, 60))
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.BottomToolBarArea, self.toolBar)
        self.toolBar_2 = QtWidgets.QToolBar(MainWindow)
        self.toolBar_2.setIconSize(QtCore.QSize(50, 50))
        self.toolBar_2.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.toolBar_2.setObjectName("toolBar_2")
        MainWindow.addToolBar(QtCore.Qt.BottomToolBarArea, self.toolBar_2)
        self.actionPrevious = QtWidgets.QAction(MainWindow)
        self.actionPrevious.setObjectName("actionPrevious")
        self.actionPrev = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../../.designer/backup/icons8-previous-96.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPrev.setIcon(icon1)
        self.actionPrev.setObjectName("actionPrev")
        self.actionFace = QtWidgets.QAction(MainWindow)
        self.actionFace.setIcon(icon)
        self.actionFace.setObjectName("actionFace")
        self.actionGraph = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("../../.designer/backup/icons8-graph-64.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionGraph.setIcon(icon2)
        self.actionGraph.setObjectName("actionGraph")
        self.actionDataframe = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("../../.designer/backup/icons8-data-sheet-96 (1).png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDataframe.setIcon(icon3)
        self.actionDataframe.setObjectName("actionDataframe")
        self.actionNext = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("../../.designer/backup/icons8-next-96.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionNext.setIcon(icon4)
        self.actionNext.setObjectName("actionNext")
        self.actionDeploy_Model = QtWidgets.QAction(MainWindow)
        self.actionDeploy_Model.setObjectName("actionDeploy_Model")
        self.actionCSV = QtWidgets.QAction(MainWindow)
        self.actionCSV.setObjectName("actionCSV")
        self.actionXLXV = QtWidgets.QAction(MainWindow)
        self.actionXLXV.setObjectName("actionXLXV")
        self.actionTSV = QtWidgets.QAction(MainWindow)
        self.actionTSV.setObjectName("actionTSV")
        self.actionTXT = QtWidgets.QAction(MainWindow)
        self.actionTXT.setObjectName("actionTXT")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionLoad_Model = QtWidgets.QAction(MainWindow)
        self.actionLoad_Model.setObjectName("actionLoad_Model")
        self.actionDeploy_Model_2 = QtWidgets.QAction(MainWindow)
        self.actionDeploy_Model_2.setObjectName("actionDeploy_Model_2")
        self.actionCreate_Playlist = QtWidgets.QAction(MainWindow)
        self.actionCreate_Playlist.setObjectName("actionCreate_Playlist")
        self.actionExtract_Faces = QtWidgets.QAction(MainWindow)
        self.actionExtract_Faces.setObjectName("actionExtract_Faces")
        self.actionLoad_Project = QtWidgets.QAction(MainWindow)
        self.actionLoad_Project.setObjectName("actionLoad_Project")
        self.actionLoad_Annotations = QtWidgets.QAction(MainWindow)
        self.actionLoad_Annotations.setObjectName("actionLoad_Annotations")
        self.actionLoad_Image_Directory = QtWidgets.QAction(MainWindow)
        self.actionLoad_Image_Directory.setObjectName("actionLoad_Image_Directory")
        self.actionSave_Project = QtWidgets.QAction(MainWindow)
        self.actionSave_Project.setObjectName("actionSave_Project")
        self.actionCSV_2 = QtWidgets.QAction(MainWindow)
        self.actionCSV_2.setObjectName("actionCSV_2")
        self.actionXLXV_2 = QtWidgets.QAction(MainWindow)
        self.actionXLXV_2.setObjectName("actionXLXV_2")
        self.actionTSV_2 = QtWidgets.QAction(MainWindow)
        self.actionTSV_2.setObjectName("actionTSV_2")
        self.actionSaveAnn = QtWidgets.QAction(MainWindow)
        self.actionSaveAnn.setObjectName("actionSaveAnn")
        self.actionHelp = QtWidgets.QAction(MainWindow)
        self.actionHelp.setObjectName("actionHelp")
        self.actionSave_Annotation = QtWidgets.QAction(MainWindow)
        self.actionSave_Annotation.setObjectName("actionSave_Annotation")
        self.actionCreate = QtWidgets.QAction(MainWindow)
        self.actionCreate.setObjectName("actionCreate")
        self.actionCreate_Model = QtWidgets.QAction(MainWindow)
        self.actionCreate_Model.setObjectName("actionCreate_Model")
        self.actionOpen_Image_Directory = QtWidgets.QAction(MainWindow)
        self.actionOpen_Image_Directory.setObjectName("actionOpen_Image_Directory")
        self.actionAnnotation_Key = QtWidgets.QAction(MainWindow)
        self.actionAnnotation_Key.setObjectName("actionAnnotation_Key")
        self.actionAnnotation_Key_2 = QtWidgets.QAction(MainWindow)
        self.actionAnnotation_Key_2.setObjectName("actionAnnotation_Key_2")
        self.actionExtract_Frames_from_Video = QtWidgets.QAction(MainWindow)
        self.actionExtract_Frames_from_Video.setObjectName("actionExtract_Frames_from_Video")
        self.actionSaveFD = QtWidgets.QAction(MainWindow)
        self.actionSaveFD.setObjectName("actionSaveFD")
        self.actionSaveML = QtWidgets.QAction(MainWindow)
        self.actionSaveML.setObjectName("actionSaveML")
        self.actionLoad_Signal_File = QtWidgets.QAction(MainWindow)
        self.actionLoad_Signal_File.setObjectName("actionLoad_Signal_File")
        self.actionAnotation_File = QtWidgets.QAction(MainWindow)
        self.actionAnotation_File.setObjectName("actionAnotation_File")
        self.actionAdd_Annotation = QtWidgets.QAction(MainWindow)
        self.actionAdd_Annotation.setEnabled(False)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("src/main/resources/icons8-add-database-96.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAdd_Annotation.setIcon(icon5)
        self.actionAdd_Annotation.setObjectName("actionAdd_Annotation")
        self.actionClassKey = QtWidgets.QAction(MainWindow)
        self.actionClassKey.setEnabled(False)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("src/main/resources/icons8-list-64.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClassKey.setIcon(icon6)
        self.actionClassKey.setVisible(True)
        self.actionClassKey.setIconVisibleInMenu(True)
        self.actionClassKey.setObjectName("actionClassKey")
        self.actionLoad_Signal_Data = QtWidgets.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("src/main/resources/icons8-export-csv-96.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionLoad_Signal_Data.setIcon(icon7)
        self.actionLoad_Signal_Data.setObjectName("actionLoad_Signal_Data")
        self.actionExport_Annotations = QtWidgets.QAction(MainWindow)
        self.actionExport_Annotations.setEnabled(False)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("src/main/resources/icons8-import-csv-96.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExport_Annotations.setIcon(icon8)
        self.actionExport_Annotations.setObjectName("actionExport_Annotations")
        self.actionConfirm_Annotation_Area = QtWidgets.QAction(MainWindow)
        self.actionConfirm_Annotation_Area.setEnabled(False)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("src/main/resources/icons8-checked-checkbox-96.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionConfirm_Annotation_Area.setIcon(icon9)
        self.actionConfirm_Annotation_Area.setObjectName("actionConfirm_Annotation_Area")
        self.actionClass_1 = QtWidgets.QAction(MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("src/main/resources/icons8-heat-map-96.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icono = QtGui.QIcon()
        icono.addPixmap(QtGui.QPixmap("src/main/resources/icons8-heat-map-96-o.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icony = QtGui.QIcon()
        icony.addPixmap(QtGui.QPixmap("src/main/resources/icons8-heat-map-96-y.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icong = QtGui.QIcon()
        icong.addPixmap(QtGui.QPixmap("src/main/resources/icons8-heat-map-96-g.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icongg = QtGui.QIcon()
        icongg.addPixmap(QtGui.QPixmap("src/main/resources/icons8-heat-map-96-gg.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icont = QtGui.QIcon()
        icont.addPixmap(QtGui.QPixmap("src/main/resources/icons8-heat-map-96-t.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        iconp = QtGui.QIcon()
        iconp.addPixmap(QtGui.QPixmap("src/main/resources/icons8-heat-map-96-p.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        iconpi = QtGui.QIcon()
        iconpi.addPixmap(QtGui.QPixmap("src/main/resources/icons8-heat-map-96-pi.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClass_1.setIcon(icon10)
        self.actionClass_1.setVisible(False)
        self.actionClass_1.setObjectName("actionClass_1")
        self.actionClass_2 = QtWidgets.QAction(MainWindow)
        self.actionClass_2.setIcon(icono)
        self.actionClass_2.setVisible(False)
        self.actionClass_2.setObjectName("actionClass_2")
        self.actionClass_3 = QtWidgets.QAction(MainWindow)
        self.actionClass_3.setIcon(icony)
        self.actionClass_3.setVisible(False)
        self.actionClass_3.setObjectName("actionClass_3")
        self.actionClass_4 = QtWidgets.QAction(MainWindow)
        self.actionClass_4.setIcon(icong)
        self.actionClass_4.setVisible(False)
        self.actionClass_4.setObjectName("actionClass_4")
        self.actionClass_5 = QtWidgets.QAction(MainWindow)
        self.actionClass_5.setIcon(icongg)
        self.actionClass_5.setVisible(False)
        self.actionClass_5.setObjectName("actionClass_5")
        self.actionClass_6 = QtWidgets.QAction(MainWindow)
        self.actionClass_6.setIcon(icont)
        self.actionClass_6.setVisible(False)
        self.actionClass_6.setObjectName("actionClass_6")
        self.actionClass_7 = QtWidgets.QAction(MainWindow)
        self.actionClass_7.setIcon(iconp)
        self.actionClass_7.setVisible(False)
        self.actionClass_7.setObjectName("actionClass_7")
        self.actionClass_8 = QtWidgets.QAction(MainWindow)
        self.actionClass_8.setIcon(iconpi)
        self.actionClass_8.setVisible(False)
        self.actionClass_8.setObjectName("actionClass_8")
        self.menuSave.addAction(self.actionSave_Project)
        self.menuLoad.addAction(self.actionLoad_Project)
        self.menuMenu.addAction(self.menuLoad.menuAction())
        self.menuMenu.addAction(self.menuSave.menuAction())
        self.menuMenu.addSeparator()
        self.menuMenu.addAction(self.actionAbout)
        self.menubar.addAction(self.menuMenu.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.toolBar.addAction(self.actionLoad_Signal_Data)
        self.toolBar.addAction(self.actionExport_Annotations)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionAdd_Annotation)
        self.toolBar.addAction(self.actionConfirm_Annotation_Area)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionClassKey)
        self.toolBar_2.addAction(self.actionClass_1)
        self.toolBar_2.addAction(self.actionClass_2)
        self.toolBar_2.addAction(self.actionClass_3)
        self.toolBar_2.addAction(self.actionClass_4)
        self.toolBar_2.addAction(self.actionClass_5)
        self.toolBar_2.addAction(self.actionClass_6)
        self.toolBar_2.addAction(self.actionClass_7)
        self.toolBar_2.addAction(self.actionClass_8)

        self.retranslateUi(MainWindow)
        self.dataTabs.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "QAC-Face"))
        self.signalGroupBox.setTitle(_translate("MainWindow", "Signal"))
        self.annotationGroupBox.setTitle(_translate("MainWindow", "Annotation"))
        self.dataTabs.setTabText(self.dataTabs.indexOf(self.annoTab), _translate("MainWindow", "Annotation Dataframe"))
        self.dataTabs.setTabText(self.dataTabs.indexOf(self.signalTab), _translate("MainWindow", "Signals Dataframe"))
        self.menuMenu.setTitle(_translate("MainWindow", "Menu"))
        self.menuSave.setTitle(_translate("MainWindow", "Save"))
        self.menuLoad.setTitle(_translate("MainWindow", "Load"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.toolBar_2.setWindowTitle(_translate("MainWindow", "toolBar_2"))
        self.actionPrevious.setText(_translate("MainWindow", "Previous"))
        self.actionPrev.setText(_translate("MainWindow", "Previous"))
        self.actionPrev.setToolTip(_translate("MainWindow", "Previous Image"))
        self.actionPrev.setShortcut(_translate("MainWindow", "Left"))
        self.actionFace.setText(_translate("MainWindow", "Analyze"))
        self.actionFace.setToolTip(_translate("MainWindow", "Face Analysis: Action Units and Emotion Predictions"))
        self.actionFace.setShortcut(_translate("MainWindow", "F"))
        self.actionGraph.setText(_translate("MainWindow", "Graph"))
        self.actionGraph.setToolTip(_translate("MainWindow", "Graph Annotation and Analysis Data"))
        self.actionGraph.setShortcut(_translate("MainWindow", "G"))
        self.actionDataframe.setText(_translate("MainWindow", "Dataframe"))
        self.actionDataframe.setToolTip(_translate("MainWindow", "Dataframe of Annotation and Analysis"))
        self.actionDataframe.setShortcut(_translate("MainWindow", "D"))
        self.actionNext.setText(_translate("MainWindow", "Next"))
        self.actionNext.setToolTip(_translate("MainWindow", "Next Image"))
        self.actionNext.setShortcut(_translate("MainWindow", "Right"))
        self.actionDeploy_Model.setText(_translate("MainWindow", "Deploy Model"))
        self.actionCSV.setText(_translate("MainWindow", "CSV"))
        self.actionXLXV.setText(_translate("MainWindow", "XLXV"))
        self.actionTSV.setText(_translate("MainWindow", "TSV"))
        self.actionTXT.setText(_translate("MainWindow", "TXT"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionAbout.setShortcut(_translate("MainWindow", "?"))
        self.actionLoad_Model.setText(_translate("MainWindow", "Load Model"))
        self.actionDeploy_Model_2.setText(_translate("MainWindow", "Deploy Model"))
        self.actionCreate_Playlist.setText(_translate("MainWindow", "Create Directory"))
        self.actionExtract_Faces.setText(_translate("MainWindow", "Extract Faces from Images"))
        self.actionLoad_Project.setText(_translate("MainWindow", "Load Project"))
        self.actionLoad_Project.setShortcut(_translate("MainWindow", "Ctrl+L"))
        self.actionLoad_Annotations.setText(_translate("MainWindow", "Load Annotations"))
        self.actionLoad_Image_Directory.setText(_translate("MainWindow", "Load Image Playlist"))
        self.actionSave_Project.setText(_translate("MainWindow", "Save Project"))
        self.actionSave_Project.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionCSV_2.setText(_translate("MainWindow", "CSV"))
        self.actionXLXV_2.setText(_translate("MainWindow", "XLXV"))
        self.actionTSV_2.setText(_translate("MainWindow", "TSV"))
        self.actionSaveAnn.setText(_translate("MainWindow", "Annotations"))
        self.actionHelp.setText(_translate("MainWindow", "Help"))
        self.actionSave_Annotation.setText(_translate("MainWindow", "Save Annotations"))
        self.actionCreate.setText(_translate("MainWindow", "New Project"))
        self.actionCreate_Model.setText(_translate("MainWindow", "Create Model"))
        self.actionOpen_Image_Directory.setText(_translate("MainWindow", "Open Image Directory"))
        self.actionOpen_Image_Directory.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionAnnotation_Key.setText(_translate("MainWindow", "Annotation"))
        self.actionAnnotation_Key_2.setText(_translate("MainWindow", "Annotation Key"))
        self.actionExtract_Frames_from_Video.setText(_translate("MainWindow", "Extract Frames from Video"))
        self.actionSaveFD.setText(_translate("MainWindow", "Notes"))
        self.actionSaveML.setText(_translate("MainWindow", "Loaded Model Predictions"))
        self.actionLoad_Signal_File.setText(_translate("MainWindow", "Signal File"))
        self.actionAnotation_File.setText(_translate("MainWindow", "Anotation File"))
        self.actionAdd_Annotation.setText(_translate("MainWindow", "Add Annotation"))
        self.actionAdd_Annotation.setStatusTip(_translate("MainWindow", "Add Annotation"))
        self.actionClassKey.setText(_translate("MainWindow", "Create Classification Key"))
        self.actionClassKey.setStatusTip(_translate("MainWindow", "Create Classification Key"))
        self.actionLoad_Signal_Data.setText(_translate("MainWindow", "Load Signal Data"))
        self.actionExport_Annotations.setText(_translate("MainWindow", "Export Annotations"))
        self.actionConfirm_Annotation_Area.setText(_translate("MainWindow", "Confirm Annotation Area"))
        self.actionConfirm_Annotation_Area.setStatusTip(_translate("MainWindow", "Confirm Annotation Area"))
        self.actionClass_1.setText(_translate("MainWindow", "Class 1"))
        self.actionClass_2.setText(_translate("MainWindow", "Class 2"))
        self.actionClass_3.setText(_translate("MainWindow", "Class 3"))
        self.actionClass_4.setText(_translate("MainWindow", "Class 4"))
        self.actionClass_5.setText(_translate("MainWindow", "Class 5"))
        self.actionClass_6.setText(_translate("MainWindow", "Class 6"))
        self.actionClass_7.setText(_translate("MainWindow", "Class 7"))
        self.actionClass_8.setText(_translate("MainWindow", "Class 8"))

        self.actionLoad_Signal_Data.triggered.connect(self.load_signal_file)
        self.actionAdd_Annotation.triggered.connect(self.add_annotation)
        self.actionConfirm_Annotation_Area.triggered.connect(self.get_annotation_values)
        self.actionClassKey.triggered.connect(self.create_key)
        self.actionClass_1.triggered.connect(self.class_1_img)
        self.actionClass_2.triggered.connect(self.class_2_img)    
        self.actionClass_3.triggered.connect(self.class_3_img)
        self.actionClass_4.triggered.connect(self.class_4_img) 
        self.actionClass_5.triggered.connect(self.class_5_img)
        self.actionClass_6.triggered.connect(self.class_6_img)  
        self.actionClass_7.triggered.connect(self.class_7_img)
        self.actionClass_8.triggered.connect(self.class_8_img)  
        self.actionExport_Annotations.triggered.connect(self.export_data)
        self.actionSave_Project.triggered.connect(self.export_data)
        self.actionLoad_Project.triggered.connect(self.load_project)
        
    def load_signal_file(self):
        self.loaded_signal_file, _ = QFileDialog.getOpenFileName()
        print(self.loaded_signal_file)
        self.signal_df = pd.read_csv(self.loaded_signal_file)
        self.signalWidget.plot(x= self.signal_df.index.values, y=self.signal_df.iloc[:,1], pen = "b")
        self.signalWidget.plot(x= self.signal_df.index.values, y=self.signal_df.iloc[:,2], pen = "r")
        self.signalWidget.plot(x= self.signal_df.index.values, y=self.signal_df.iloc[:,3], pen = 'g')
        self.signal_df.insert(0, 'class', 0)
        #self.signal_df['class'] = range(0, len(self.signal_df.index.values))
        #self.signal_df['class'].loc[0:len(self.signal_df.index.values)] = 0
        self.sig_data = TableModel(self.signal_df)
        self.signalTable.setModel(self.sig_data) 
        self.annotationWidget.plot(x=self.signal_df.index.values, y=self.signal_df['class'], symbol='o', symbolBrush = 'k', connect = 'finite', pen = None)
        self.anno_plot = self.annotationWidget.plot(x=self.signal_df.index.values, y=self.signal_df['class'], symbol='o', symbolBrush = 'k', connect = 'finite', pen = None) 
        self.annotationWidget.setYRange(0, 10)
        self.actionAdd_Annotation.setEnabled(True)
        self.actionConfirm_Annotation_Area.setEnabled(True)
        self.actionExport_Annotations.setEnabled(True)
        self.actionLoad_Signal_Data.setEnabled(False)
        self.actionClassKey.setEnabled(True)
    


        
    def add_annotation(self):
        num,ok = QInputDialog.getInt(MainWindow,"Classification Number","Enter Classification Number", min =1, max=8)
        if ok:
            self.cur_class = num 
        if self.cur_class == 1:
            self.brush = 255, 102, 102, 100
        if self.cur_class == 2:
            self.brush = 255, 178, 102, 100
        if self.cur_class == 3:
            self.brush = 255, 255, 102, 100
        if self.cur_class == 4:
            self.brush = 178, 255, 102, 100
        if self.cur_class == 5:
            self.brush = 105, 255, 102, 100
        if self.cur_class == 6:
            self.brush = 102, 255, 255, 100
        if self.cur_class == 7:
            self.brush = 102, 102, 155, 100
        if self.cur_class == 8:
            self.brush = 255, 202, 255, 100
        self.lr = pg.LinearRegionItem([0, len(self.signal_df.index.values)], brush = self.brush)  # This is a mouse-draggable window on the plot
        self.lr.setBounds([0, len(self.signal_df.index.values)])
        self.signalWidget.addItem(self.lr)



        
    def get_annotation_values(self):
        self.lr_region = list(self.lr.getRegion())
        self.lr_region_max = int(max(self.lr_region)) 
        self.lr_region_min = int(min(self.lr_region))
        self.lr_range = range(self.lr_region_min, self.lr_region_max)
        self.signal_df.loc[self.lr_range, 'class'] = self.cur_class #this should be tied to spinbox
        self.annotationWidget.clear()
        self.annotationWidget.plot(x=self.signal_df.index.values, y=self.signal_df['class'], symbol='o', symbolBrush = 'k', connect = 'finite', pen = None)
        self.anno_plot = self.annotationWidget.plot(x=self.signal_df.index.values, y=self.signal_df['class'], symbol='o', symbolBrush = 'k', connect = 'finite', pen = None)    
        self.sig_data = TableModel(self.signal_df)
        self.signalTable.setModel(self.sig_data) 
        self.lr.setMovable(m=False)
    def create_key(self):
        anns,ok = QInputDialog.getInt(MainWindow,"Number of Classifications","Enter Number of Classifications", min =1, max=8)
        if ok:
            self.class_num = anns
            self.set_vis_classes()
        self.actionClassKey.setEnabled(False)
    def set_vis_classes(self):
        if self.class_num == 1:
            self.actionClass_1.setVisible(True)
        if self.class_num == 2:
            self.actionClass_1.setVisible(True)
            self.actionClass_2.setVisible(True)
        if self.class_num == 3:
            self.actionClass_1.setVisible(True)
            self.actionClass_2.setVisible(True)
            self.actionClass_3.setVisible(True)
        if self.class_num == 4:
            self.actionClass_1.setVisible(True)
            self.actionClass_2.setVisible(True)
            self.actionClass_3.setVisible(True)
            self.actionClass_4.setVisible(True)
        if self.class_num == 5:
            self.actionClass_1.setVisible(True)
            self.actionClass_2.setVisible(True)
            self.actionClass_3.setVisible(True)
            self.actionClass_4.setVisible(True)
            self.actionClass_5.setVisible(True)
        if self.class_num == 6:
            self.actionClass_1.setVisible(True)
            self.actionClass_2.setVisible(True)
            self.actionClass_3.setVisible(True)
            self.actionClass_4.setVisible(True)
            self.actionClass_5.setVisible(True)
            self.actionClass_6.setVisible(True)
        if self.class_num == 7:
            self.actionClass_1.setVisible(True)
            self.actionClass_2.setVisible(True)
            self.actionClass_3.setVisible(True)
            self.actionClass_4.setVisible(True)
            self.actionClass_5.setVisible(True)
            self.actionClass_6.setVisible(True)
            self.actionClass_7.setVisible(True)
        if self.class_num == 8:
            self.actionClass_1.setVisible(True)
            self.actionClass_2.setVisible(True)
            self.actionClass_3.setVisible(True)
            self.actionClass_4.setVisible(True)
            self.actionClass_5.setVisible(True)
            self.actionClass_6.setVisible(True)
            self.actionClass_7.setVisible(True)
            self.actionClass_8.setVisible(True)
    def class_1_img(self):
        text,ok = QInputDialog.getText(MainWindow,"Class 1","Enter Class 1 Name")
        if ok:
            text = text
        self.actionClass_1.setText("Class 1 (red): " + text)
        self.img_c1, _ = QFileDialog.getOpenFileName()
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(self.img_c1), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClass_1.setIcon(icon)
    def class_2_img(self):
        text,ok = QInputDialog.getText(MainWindow,"Class 1","Enter Class 1 Name")
        if ok:
            text = text
        self.actionClass_2.setText("Class 2 (orange): " + text)
        self.img_c2, _ = QFileDialog.getOpenFileName()
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(self.img_c2), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClass_2.setIcon(icon)
    def class_3_img(self):
        text,ok = QInputDialog.getText(MainWindow,"Class 1","Enter Class 1 Name")
        if ok:
            text = text
        self.actionClass_3.setText("Class 3 (yellow): " + text)
        self.img_c3, _ = QFileDialog.getOpenFileName()
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(self.img_c3), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClass_3.setIcon(icon)
    def class_4_img(self):
        text,ok = QInputDialog.getText(MainWindow,"Class 1","Enter Class 1 Name")
        if ok:
            text = text
        self.actionClass_4.setText("Class 4 (green/yellow): " + text)
        self.img_c4, _ = QFileDialog.getOpenFileName()
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(self.img_c4), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClass_4.setIcon(icon)
    def class_5_img(self):
        text,ok = QInputDialog.getText(MainWindow,"Class 1","Enter Class 1 Name")
        if ok:
            text = text
        self.actionClass_5.setText("Class 5 (green): " + text)
        self.img_c5, _ = QFileDialog.getOpenFileName()
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(self.img_c5), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClass_5.setIcon(icon)
    def class_6_img(self):
        text,ok = QInputDialog.getText(MainWindow,"Class 1","Enter Class 1 Name")
        if ok:
            text = text
        self.actionClass_6.setText("Class 6 (teal): " + text)
        self.img_c6, _ = QFileDialog.getOpenFileName()
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(self.img_c6), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClass_6.setIcon(icon)
    def class_7_img(self):
        text,ok = QInputDialog.getText(MainWindow,"Class 1","Enter Class 1 Name")
        if ok:
            text = text
        self.actionClass_7.setText("Class 7 (blue): " + text)
        self.img_c7, _ = QFileDialog.getOpenFileName()
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(self.img_c7), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClass_7.setIcon(icon)
    def class_8_img(self):
        text,ok = QInputDialog.getText(MainWindow,"Class 1","Enter Class 1 Name")
        if ok:
            text = text
        self.actionClass_8.setText("Class 8 (purple): " + text)
        self.img_c8, _ = QFileDialog.getOpenFileName()
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(self.img_c8), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClass_8.setIcon(icon)
    def export_data(self):
        self.saved_annotations, _ = QFileDialog.getSaveFileName()
        self.signal_df.to_csv(self.saved_annotations + ".csv")
    def load_project(self):
        self.loaded_signal_file, _ = QFileDialog.getOpenFileName()
        print(self.loaded_signal_file)
        self.signal_df = pd.read_csv(self.loaded_signal_file)
        self.signalWidget.plot(x= self.signal_df.index.values, y=self.signal_df.iloc[:,2], pen = "b")
        self.signalWidget.plot(x= self.signal_df.index.values, y=self.signal_df.iloc[:,3], pen = "r")
        self.signalWidget.plot(x= self.signal_df.index.values, y=self.signal_df.iloc[:,4], pen = 'g')
        self.sig_data = TableModel(self.signal_df)
        self.signalTable.setModel(self.sig_data) 
        self.annotationWidget.plot(x=self.signal_df.index.values, y=self.signal_df['class'], symbol='o', symbolBrush = 'k', connect = 'finite', pen = None)
        self.anno_plot = self.annotationWidget.plot(x=self.signal_df.index.values, y=self.signal_df['class'], symbol='o', symbolBrush = 'k', connect = 'finite', pen = None) 
        self.annotationWidget.setYRange(0, 10)
        self.actionAdd_Annotation.setEnabled(True)
        self.actionConfirm_Annotation_Area.setEnabled(True)
        self.actionExport_Annotations.setEnabled(True)
        self.actionLoad_Signal_Data.setEnabled(False)
        self.actionClassKey.setEnabled(True)
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    # Fusion dark palette from https://gist.github.com/QuantumCD/6245215.
    palette = QPalette()
    palette.setColor(QPalette.Window, QColor(53, 53, 53))
    palette.setColor(QPalette.WindowText, Qt.white)
    palette.setColor(QPalette.Base, QColor(25, 25, 25))
    palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
    palette.setColor(QPalette.ToolTipBase, Qt.white)
    palette.setColor(QPalette.ToolTipText, Qt.white)
    palette.setColor(QPalette.Text, Qt.white)
    palette.setColor(QPalette.Button, QColor(53, 53, 53))
    palette.setColor(QPalette.ButtonText, Qt.white)
    palette.setColor(QPalette.BrightText, Qt.red)
    palette.setColor(QPalette.Link, QColor(42, 130, 218))
    palette.setColor(QPalette.Highlight, QColor(42, 130, 218))
    palette.setColor(QPalette.HighlightedText, Qt.black)
    app.setPalette(palette)
    app.setStyleSheet("QToolTip { color: #ffffff; background-color: #2a82da; border: 1px solid white; }")
    #palette = QtGui.QPalette()

    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

